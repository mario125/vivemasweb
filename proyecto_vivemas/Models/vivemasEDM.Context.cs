//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace proyecto_vivemas.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class vivemas_dbEntities : DbContext
    {
        public vivemas_dbEntities()
            : base("name=vivemas_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<datosusuarios> datosusuarios { get; set; }
        public virtual DbSet<roles> roles { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
        public virtual DbSet<empresas> empresas { get; set; }
        public virtual DbSet<lotes> lotes { get; set; }
        public virtual DbSet<proyectos> proyectos { get; set; }
        public virtual DbSet<tiposdocumentoidentidad> tiposdocumentoidentidad { get; set; }
        public virtual DbSet<coordenadaslotes> coordenadaslotes { get; set; }
        public virtual DbSet<canalescontacto> canalescontacto { get; set; }
        public virtual DbSet<departamentos> departamentos { get; set; }
        public virtual DbSet<distritos> distritos { get; set; }
        public virtual DbSet<estadoscaptacioncliente> estadoscaptacioncliente { get; set; }
        public virtual DbSet<estadoscivil> estadoscivil { get; set; }
        public virtual DbSet<estadosproceso> estadosproceso { get; set; }
        public virtual DbSet<interesesclienteproyecto> interesesclienteproyecto { get; set; }
        public virtual DbSet<medioscontacto> medioscontacto { get; set; }
        public virtual DbSet<monedas> monedas { get; set; }
        public virtual DbSet<provincias> provincias { get; set; }
        public virtual DbSet<tipospersona> tipospersona { get; set; }
        public virtual DbSet<titulares> titulares { get; set; }
        public virtual DbSet<estadosseparacion> estadosseparacion { get; set; }
        public virtual DbSet<bancos> bancos { get; set; }
        public virtual DbSet<cuentasbanco> cuentasbanco { get; set; }
        public virtual DbSet<estadoslote> estadoslote { get; set; }
        public virtual DbSet<tiposcambio> tiposcambio { get; set; }
        public virtual DbSet<tiposmetodopago> tiposmetodopago { get; set; }
        public virtual DbSet<tiposmoneda> tiposmoneda { get; set; }
        public virtual DbSet<clientes> clientes { get; set; }
        public virtual DbSet<estadosinterescliente> estadosinterescliente { get; set; }
        public virtual DbSet<estadostransaccion> estadostransaccion { get; set; }
        public virtual DbSet<tiposmovimiento> tiposmovimiento { get; set; }
        public virtual DbSet<tipostransaccion> tipostransaccion { get; set; }
        public virtual DbSet<transacciones> transacciones { get; set; }
        public virtual DbSet<anexoscontratocotizacion> anexoscontratocotizacion { get; set; }
        public virtual DbSet<anexoscontratoproforma> anexoscontratoproforma { get; set; }
        public virtual DbSet<cotizaciones> cotizaciones { get; set; }
        public virtual DbSet<cuotas> cuotas { get; set; }
        public virtual DbSet<estadoscontrato> estadoscontrato { get; set; }
        public virtual DbSet<estadosuif> estadosuif { get; set; }
        public virtual DbSet<pagos> pagos { get; set; }
        public virtual DbSet<proformascontrato> proformascontrato { get; set; }
        public virtual DbSet<tipospropietario> tipospropietario { get; set; }
        public virtual DbSet<tipossociedad> tipossociedad { get; set; }
        public virtual DbSet<configuraciones> configuraciones { get; set; }
        public virtual DbSet<separaciones> separaciones { get; set; }
        public virtual DbSet<transaccionesseparacion> transaccionesseparacion { get; set; }
        public virtual DbSet<estadosdocumento> estadosdocumento { get; set; }
        public virtual DbSet<series> series { get; set; }
        public virtual DbSet<tiposdocumentoventa> tiposdocumentoventa { get; set; }
        public virtual DbSet<documentosventa> documentosventa { get; set; }
        public virtual DbSet<documentosventadetalle> documentosventadetalle { get; set; }
        public virtual DbSet<vw_cargarClientesContrato> vw_cargarClientesContrato { get; set; }
        public virtual DbSet<vw_busquedaContratosAutocomplete> vw_busquedaContratosAutocomplete { get; set; }
        public virtual DbSet<proformasuif> proformasuif { get; set; }
        public virtual DbSet<notascredito> notascredito { get; set; }
        public virtual DbSet<notascreditodetalle> notascreditodetalle { get; set; }
        public virtual DbSet<tiposnotacredito> tiposnotacredito { get; set; }
        public virtual DbSet<tiposcontacto> tiposcontacto { get; set; }
        public virtual DbSet<estadosevento> estadosevento { get; set; }
        public virtual DbSet<eventostipocontacto> eventostipocontacto { get; set; }
        public virtual DbSet<eventos> eventos { get; set; }
        public virtual DbSet<datosencuesta> datosencuesta { get; set; }
        public virtual DbSet<encuestas> encuestas { get; set; }
        public virtual DbSet<preguntas> preguntas { get; set; }
        public virtual DbSet<respuestas> respuestas { get; set; }
        public virtual DbSet<tiposencuesta> tiposencuesta { get; set; }
        public virtual DbSet<vw_cargarEventos> vw_cargarEventos { get; set; }
        public virtual DbSet<vw_reporteVentas> vw_reporteVentas { get; set; }
        public virtual DbSet<contratos> contratos { get; set; }
        public virtual DbSet<vw_reporteeventos> vw_reporteeventos { get; set; }
    
        public virtual ObjectResult<sp_cargarCuotas_Result> sp_cargarCuotas(Nullable<long> contratoId)
        {
            var contratoIdParameter = contratoId.HasValue ?
                new ObjectParameter("contratoId", contratoId) :
                new ObjectParameter("contratoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_cargarCuotas_Result>("sp_cargarCuotas", contratoIdParameter);
        }
    
        public virtual ObjectResult<sp_obtenerDatosCliente_Result> sp_obtenerDatosCliente(Nullable<long> transaccionId)
        {
            var transaccionIdParameter = transaccionId.HasValue ?
                new ObjectParameter("transaccionId", transaccionId) :
                new ObjectParameter("transaccionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerDatosCliente_Result>("sp_obtenerDatosCliente", transaccionIdParameter);
        }
    
        public virtual ObjectResult<string> sp_obtenerDireccionCliente(Nullable<long> transaccionId)
        {
            var transaccionIdParameter = transaccionId.HasValue ?
                new ObjectParameter("transaccionId", transaccionId) :
                new ObjectParameter("transaccionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_obtenerDireccionCliente", transaccionIdParameter);
        }
    
        public virtual ObjectResult<sp_obtenerReportePagosClienteDetalle_Result> sp_obtenerReportePagosClienteDetalle(Nullable<long> contratoId)
        {
            var contratoIdParameter = contratoId.HasValue ?
                new ObjectParameter("contratoId", contratoId) :
                new ObjectParameter("contratoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerReportePagosClienteDetalle_Result>("sp_obtenerReportePagosClienteDetalle", contratoIdParameter);
        }
    
        public virtual ObjectResult<sp_obtenerReporteTransacciones_Result> sp_obtenerReporteTransacciones()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerReporteTransacciones_Result>("sp_obtenerReporteTransacciones");
        }
    
        public virtual ObjectResult<sp_obtenerReportePagosClienteCabecera_Result> sp_obtenerReportePagosClienteCabecera(Nullable<long> contratoId)
        {
            var contratoIdParameter = contratoId.HasValue ?
                new ObjectParameter("contratoId", contratoId) :
                new ObjectParameter("contratoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerReportePagosClienteCabecera_Result>("sp_obtenerReportePagosClienteCabecera", contratoIdParameter);
        }
    
        public virtual ObjectResult<sp_obtenerReportePagosClienteDetalle_v2_Result> sp_obtenerReportePagosClienteDetalle_v2(Nullable<long> contratoId)
        {
            var contratoIdParameter = contratoId.HasValue ?
                new ObjectParameter("contratoId", contratoId) :
                new ObjectParameter("contratoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerReportePagosClienteDetalle_v2_Result>("sp_obtenerReportePagosClienteDetalle_v2", contratoIdParameter);
        }
    
        public virtual ObjectResult<sp_obtenerReportePagosClienteDetalle_v3_Result> sp_obtenerReportePagosClienteDetalle_v3(Nullable<long> cuotaId)
        {
            var cuotaIdParameter = cuotaId.HasValue ?
                new ObjectParameter("cuotaId", cuotaId) :
                new ObjectParameter("cuotaId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerReportePagosClienteDetalle_v3_Result>("sp_obtenerReportePagosClienteDetalle_v3", cuotaIdParameter);
        }
    
        public virtual ObjectResult<sp_obtenerReporteEstadoCobranza_Result> sp_obtenerReporteEstadoCobranza(Nullable<long> proyectoId)
        {
            var proyectoIdParameter = proyectoId.HasValue ?
                new ObjectParameter("proyectoId", proyectoId) :
                new ObjectParameter("proyectoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerReporteEstadoCobranza_Result>("sp_obtenerReporteEstadoCobranza", proyectoIdParameter);
        }
    
        public virtual ObjectResult<sp_cargarDataTransaccion_Result> sp_cargarDataTransaccion(Nullable<long> transaccionId)
        {
            var transaccionIdParameter = transaccionId.HasValue ?
                new ObjectParameter("transaccionId", transaccionId) :
                new ObjectParameter("transaccionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_cargarDataTransaccion_Result>("sp_cargarDataTransaccion", transaccionIdParameter);
        }
    
        public virtual ObjectResult<sp_cargarContratos_Result> sp_cargarContratos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_cargarContratos_Result>("sp_cargarContratos");
        }
    
        [DbFunction("vivemas_dbEntities", "f_eventos_detalles")]
        public virtual IQueryable<f_eventos_detalles_Result> f_eventos_detalles(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_eventos_detalles_Result>("[vivemas_dbEntities].[f_eventos_detalles](@ID)", iDParameter);
        }
    
        public virtual ObjectResult<sp_evento_detallado_Result> sp_evento_detallado(string dOCUMENTO, Nullable<int> pROYECTO, Nullable<int> lOTE)
        {
            var dOCUMENTOParameter = dOCUMENTO != null ?
                new ObjectParameter("DOCUMENTO", dOCUMENTO) :
                new ObjectParameter("DOCUMENTO", typeof(string));
    
            var pROYECTOParameter = pROYECTO.HasValue ?
                new ObjectParameter("PROYECTO", pROYECTO) :
                new ObjectParameter("PROYECTO", typeof(int));
    
            var lOTEParameter = lOTE.HasValue ?
                new ObjectParameter("LOTE", lOTE) :
                new ObjectParameter("LOTE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_evento_detallado_Result>("sp_evento_detallado", dOCUMENTOParameter, pROYECTOParameter, lOTEParameter);
        }
    }
}
